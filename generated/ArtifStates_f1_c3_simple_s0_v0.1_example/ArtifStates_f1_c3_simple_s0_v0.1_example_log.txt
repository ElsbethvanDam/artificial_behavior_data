01:05:20,880 root INFO Creating artificial data: ArtifStates_f1_example
01:05:20,887 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:20,887 root INFO poses: ['sample', 'trans']
01:05:20,888 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:20,888 root INFO num_events: 4
01:05:20,907 root INFO === sub classes ===
01:05:20,907 root INFO                       nr_frames  nr_events
0 other - 0 none             21          4
10 s1_default - 0            21          1
80 s8_overlap78 - 0          20          1
20 s2_default - 0            18          1
01:05:20,910 root INFO === super classes ===
01:05:20,910 root INFO               nr_frames  nr_events
other                21        NaN
s1_default           21        1.0
s8_overlap78         20        1.0
s2_default           18        1.0
01:05:20,914 root INFO Data saved to ./generated//ArtifStates_f1_c3_simple_s0_v0.1_example/ArtifStates_f1_c3_simple_s0_v0.1_example.p
01:05:20,916 root INFO Sequence saved to ./generated//ArtifStates_f1_c3_simple_s0_v0.1_example/ArtifStates_f1_c3_simple_s0_v0.1_example_seq.csv
01:05:20,916 root INFO Tag list:
01:05:20,916 root INFO ['T0' 'S10' 'S20' 'S80']
01:05:21,21 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=11.0.
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
01:05:21,21 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
01:05:21,22 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,23 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial_Italic.ttf) italic normal 400 normal>) = 1.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 11.05
01:05:21,24 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial Black' (ariblk.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.25
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 500 normal>) = 10.145
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,25 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial_Bold_Italic.ttf) italic normal 700 normal>) = 1.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 1.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (Comic_Sans_MS_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 0.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (Comic_Sans_MS.ttf) normal normal 400 normal>) = 10.05
01:05:21,26 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 11.335
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
01:05:21,27 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 1.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,28 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Andale Mono' (Andale_Mono.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 500 normal>) = 10.145
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,29 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 10.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 2.535
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,30 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 500 normal>) = 10.145
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,31 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 500 normal>) = 10.145
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 500 normal>) = 11.145
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,32 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 3.535
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 500 normal>) = 11.145
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial_Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
01:05:21,33 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 500 normal>) = 11.145
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 0.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 0.33499999999999996
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
01:05:21,34 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 2.24
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Andale Mono' (andalemo.ttf) normal normal 400 normal>) = 10.05
01:05:21,35 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 500 normal>) = 10.145
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 500 normal>) = 11.145
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.25
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial Black' (Arial_Black.ttf) normal normal 400 normal>) = 10.05
01:05:21,36 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=11.0 to Arial ('/usr/share/fonts/truetype/msttcorefonts/Arial.ttf') with score of 0.050000.
01:05:21,111 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
01:05:21,111 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
01:05:21,111 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
01:05:21,111 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,112 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBold.ttf) normal normal 700 normal>) = 10.335
01:05:21,113 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial_Italic.ttf) italic normal 400 normal>) = 1.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitleL' (KacstTitleL.ttf) normal normal 400 normal>) = 10.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Chandas' (chandas1-2.ttf) normal normal 400 normal>) = 10.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Gujarati' (Samyak-Gujarati.ttf) normal normal 500 normal>) = 10.145
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Assamese' (Lohit-Assamese.ttf) normal normal 400 normal>) = 10.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'OpenSymbol' (opens___.ttf) normal normal 400 normal>) = 10.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-L.ttf) normal normal 300 normal>) = 10.145
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Gubbi' (Gubbi.ttf) normal normal 400 normal>) = 10.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Bold.ttf) normal normal 700 condensed>) = 10.535
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Meera' (Meera.ttf) normal normal 400 normal>) = 10.05
01:05:21,114 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 11.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Bold.ttf) normal normal 700 condensed>) = 10.535
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBoldOblique.ttf) oblique normal 600 normal>) = 11.24
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Phetsarath OT' (Phetsarath_OT.ttf) normal normal 400 normal>) = 10.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial Black' (ariblk.ttf) normal normal 400 normal>) = 10.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalimati' (kalimati.ttf) normal normal 400 normal>) = 10.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Oblique.ttf) oblique normal 400 condensed>) = 3.25
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-B.ttf) normal normal 700 normal>) = 10.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Condensed' (Ubuntu-C.ttf) normal normal 400 condensed>) = 10.25
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Sarai' (Sarai.ttf) normal normal 400 normal>) = 10.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrowBold.ttf) normal normal 700 normal>) = 10.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari.ttf) normal normal 500 normal>) = 10.145
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBold.ttf) normal normal 700 normal>) = 10.335
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Kalapi' (Kalapi.ttf) normal normal 400 normal>) = 10.05
01:05:21,115 matplotlib.font_manager DEBUG findfont: score(<Font 'Mitra Mono' (mitra.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Samanata' (samanata.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Math TeX Gyre' (DejaVuMathTeXGyre.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Keraleeyam' (Keraleeyam.ttf) normal normal 700 normal>) = 10.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial_Bold_Italic.ttf) italic normal 700 normal>) = 1.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 1.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (Comic_Sans_MS_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Likhan' (LikhanNormal.ttf) normal normal 500 normal>) = 10.145
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-LightOblique.ttf) oblique normal 300 normal>) = 11.145
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New.ttf) normal normal 400 normal>) = 10.05
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,116 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial.ttf) normal normal 400 normal>) = 0.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstNaskh' (KacstNaskh.ttf) normal normal 500 normal>) = 10.145
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (Comic_Sans_MS.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Rekha' (Rekha.ttf) normal normal 500 normal>) = 10.145
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Bengali' (Lohit-Bengali.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Abyssinica SIL' (AbyssinicaSIL-R.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Malayalam' (Lohit-Malayalam.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-LI.ttf) italic normal 300 normal>) = 11.145
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 11.335
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Light.ttf) normal normal 300 normal>) = 10.145
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Kannada' (Lohit-Kannada.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Regular.ttf) normal normal 400 condensed>) = 10.25
01:05:21,117 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 2.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Rachana' (Rachana-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'LKLUG' (lklug.ttf) normal normal 400 normal>) = 10.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-M.ttf) normal normal 500 normal>) = 10.145
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 1.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Nakula' (nakula.ttf) normal normal 400 normal>) = 10.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-MI.ttf) italic normal 500 normal>) = 11.145
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Uroob' (Uroob.ttf) normal normal 700 normal>) = 10.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Pothana2000' (Pothana2000.ttf) normal normal 400 normal>) = 10.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstBook' (KacstBook.ttf) normal normal 500 normal>) = 10.145
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'RaghuMalayalam' (RaghuMalayalamSans-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-R.ttf) normal normal 400 normal>) = 10.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Impact' (Impact.ttf) normal normal 400 normal>) = 10.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,118 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Thin.otf) normal normal 100 normal>) = 10.335
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-Italic.ttf) italic normal 400 condensed>) = 11.25
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Saab' (Saab.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Andale Mono' (Andale_Mono.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOne' (KacstOne.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa-Medium-0.5.ttf) normal normal 500 normal>) = 10.145
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDecorative' (KacstDecorative.ttf) normal normal 500 normal>) = 10.145
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'mry_KacstQurn' (mry_KacstQurn.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gujarati' (Lohit-Gujarati.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifBoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist.ttf) normal normal 500 normal>) = 10.145
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Regular.ttc) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Tibetan Machine Uni' (TibetanMachineUni.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Gargi' (Gargi.ttf) normal normal 400 normal>) = 10.05
01:05:21,119 matplotlib.font_manager DEBUG findfont: score(<Font 'Droid Sans Fallback' (DroidSansFallbackFull.ttf) normal normal 400 normal>) = 10.05
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstFarsi' (KacstFarsi.ttf) normal normal 500 normal>) = 10.145
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstDigital' (KacstDigital.ttf) normal normal 500 normal>) = 10.145
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Italic.ttf) italic normal 400 normal>) = 5.05
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansBold.ttf) normal normal 600 normal>) = 10.24
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-B.ttf) normal normal 700 normal>) = 10.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMono.ttf) normal normal 400 normal>) = 10.05
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 10.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstArt' (KacstArt.ttf) normal normal 500 normal>) = 10.145
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Bold.ttc) normal normal 700 normal>) = 10.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-BI.ttf) italic normal 700 normal>) = 11.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstTitle' (KacstTitle.ttf) normal normal 500 normal>) = 10.145
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-Bold.ttf) normal normal 700 condensed>) = 2.535
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Malayalam' (Samyak-Malayalam.ttf) normal normal 400 normal>) = 10.05
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Devanagari' (Lohit-Devanagari.ttf) normal normal 400 normal>) = 10.05
01:05:21,120 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 2.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans Narrow' (LiberationSansNarrow-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Odia' (Lohit-Odia.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 3.335
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 3.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu' (Ubuntu-RI.ttf) italic normal 400 normal>) = 11.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk' (Padauk-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Suruma' (Suruma.ttf) normal normal 500 normal>) = 10.145
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSansOblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-R.ttf) normal normal 400 normal>) = 10.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Devanagari' (Samyak-Devanagari.ttf) normal normal 500 normal>) = 10.145
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono.ttf) normal normal 500 normal>) = 10.145
01:05:21,121 matplotlib.font_manager DEBUG findfont: score(<Font 'AnjaliOldLipi' (AnjaliOldLipi.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Karumbi' (Karumbi.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Mono' (TlwgMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 500 normal>) = 10.145
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstQurn' (KacstQurn.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil' (Lohit-Tamil.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia.ttf) normal normal 400 normal>) = 10.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Sans CJK JP' (NotoSansCJK-Bold.ttc) normal normal 700 normal>) = 10.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-Italic.ttf) italic normal 400 condensed>) = 11.25
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoBoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Italic.ttf) italic normal 500 normal>) = 11.145
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Bold.ttf) normal normal 700 normal>) = 4.335
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-RI.ttf) italic normal 400 normal>) = 11.05
01:05:21,122 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Ubuntu Mono' (UbuntuMono-BI.ttf) italic normal 700 normal>) = 11.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed.ttf) normal normal 400 condensed>) = 10.25
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Serif' (DejaVuSerifCondensed-BoldItalic.ttf) italic normal 700 condensed>) = 11.535
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'ori1Uni' (utkal.ttf) normal normal 500 normal>) = 10.145
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Chilanka' (Chilanka-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed-BoldOblique.ttf) oblique normal 700 condensed>) = 3.535
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Tamil Classical' (Lohit-Tamil-Classical.ttf) normal normal 400 normal>) = 10.05
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Sawasdee' (Sawasdee.ttf) normal normal 400 normal>) = 10.05
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa.ttf) normal normal 400 normal>) = 10.05
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (Georgia_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstScreen' (KacstScreen.ttf) normal normal 500 normal>) = 10.145
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New_Bold_Italic.ttf) italic normal 700 normal>) = 11.335
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typist' (TlwgTypist-Oblique.ttf) oblique normal 500 normal>) = 11.145
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstLetter' (KacstLetter.ttf) normal normal 500 normal>) = 10.145
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,123 matplotlib.font_manager DEBUG findfont: score(<Font 'Loma' (Loma.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (Arial_Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeMono' (FreeMonoOblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstOffice' (KacstOffice.ttf) normal normal 500 normal>) = 10.145
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Kinnari' (Kinnari-Oblique.ttf) oblique normal 500 normal>) = 11.145
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Garuda' (Garuda-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSans' (FreeSans.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 0.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Umpush' (Umpush-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Padauk Book' (PadaukBook-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,124 matplotlib.font_manager DEBUG findfont: score(<Font 'Navilu' (Navilu.ttf) normal normal 400 normal>) = 10.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Jamrul' (JamrulNormal.ttf) normal normal 500 normal>) = 10.145
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Ani' (ani.ttf) normal normal 400 normal>) = 10.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Trebuchet MS' (Trebuchet_MS_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerifItalic.ttf) italic normal 400 normal>) = 11.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Waree' (Waree-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 0.33499999999999996
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS' (KhmerOS.ttf) normal normal 400 normal>) = 10.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-Regular.ttf) normal normal 400 normal>) = 4.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSans-ExtraLight.ttf) normal normal 200 normal>) = 2.24
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Vemana2000' (vemana2000.ttf) normal normal 400 normal>) = 10.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana.ttf) normal normal 400 normal>) = 10.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Purisa' (Purisa-Oblique.ttf) oblique normal 400 normal>) = 11.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Courier New' (Courier_New_Bold.ttf) normal normal 700 normal>) = 10.335
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Sahadeva' (sahadeva.ttf) normal normal 400 normal>) = 10.05
01:05:21,125 matplotlib.font_manager DEBUG findfont: score(<Font 'Times New Roman' (Times_New_Roman_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Laksaman' (Laksaman.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Webdings' (Webdings.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Norasi' (Norasi-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Regular.otf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Telugu' (Lohit-Telugu.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (Verdana_Italic.ttf) italic normal 400 normal>) = 11.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPoster' (KacstPoster.ttf) normal normal 500 normal>) = 10.145
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Noto Mono' (NotoMono-Regular.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Samyak Tamil' (Samyak-Tamil.ttf) normal normal 500 normal>) = 10.145
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Andale Mono' (andalemo.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Manjari' (Manjari-Bold.otf) normal normal 700 normal>) = 10.335
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Lohit Gurmukhi' (Lohit-Gurmukhi.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo.ttf) normal normal 500 normal>) = 10.145
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'KacstPen' (KacstPen.ttf) normal normal 500 normal>) = 10.145
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Tlwg Typo' (TlwgTypo-Oblique.ttf) oblique normal 500 normal>) = 11.145
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Khmer OS System' (KhmerOSsys.ttf) normal normal 400 normal>) = 10.05
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'aakar' (aakar-medium.ttf) normal normal 500 normal>) = 10.145
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Mono' (LiberationMono-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,126 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa-Bold.1.1' (padmaa-Bold.1.1.ttf) normal normal 700 normal>) = 10.335
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'padmaa' (padmaa.ttf) normal normal 500 normal>) = 10.145
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'DejaVu Sans' (DejaVuSansCondensed.ttf) normal normal 400 condensed>) = 2.25
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Dyuthi' (Dyuthi.ttf) normal normal 400 normal>) = 10.05
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Mukti Narrow' (MuktiNarrow.ttf) normal normal 400 normal>) = 10.05
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Sans' (LiberationSans-BoldItalic.ttf) italic normal 700 normal>) = 5.335
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'FreeSerif' (FreeSerif.ttf) normal normal 400 normal>) = 10.05
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Liberation Serif' (LiberationSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 10.05
01:05:21,127 matplotlib.font_manager DEBUG findfont: score(<Font 'Arial Black' (Arial_Black.ttf) normal normal 400 normal>) = 10.05
01:05:21,127 matplotlib.font_manager DEBUG findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to Arial ('/usr/share/fonts/truetype/msttcorefonts/Arial.ttf') with score of 0.050000.
01:05:21,924 root INFO Creating artificial data: ArtifStates_f1
01:05:21,929 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:21,929 root INFO poses: ['sample', 'trans']
01:05:21,929 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:21,930 root INFO MC model loaded. num_classes: 32
01:05:21,953 root INFO num_events: 434
01:05:22,303 root INFO === sub classes ===
01:05:22,303 root INFO                       nr_frames  nr_events
80 s8_overlap78 - 0        3461        105
20 s2_default - 0          3362         97
10 s1_default - 0          3306        102
0 other - 0 none            614        304
01:05:22,307 root INFO === super classes ===
01:05:22,307 root INFO               nr_frames  nr_events
s8_overlap78       3461      105.0
s2_default         3362       97.0
s1_default         3306      102.0
other               614        NaN
01:05:22,311 root INFO Data saved to ./generated//ArtifStates_f1_c3_1_simple_s800_v0.1/ArtifStates_f1_c3_1_simple_s800_v0.1.p
01:05:22,313 root INFO Sequence saved to ./generated//ArtifStates_f1_c3_1_simple_s800_v0.1/ArtifStates_f1_c3_1_simple_s800_v0.1_seq.csv
01:05:22,313 root INFO Tag list:
01:05:22,314 root INFO ['S10' 'T0' 'S20' 'S80']
01:05:23,274 root INFO Creating artificial data: ArtifStates_f1
01:05:23,279 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:23,279 root INFO poses: ['sample', 'trans']
01:05:23,279 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:23,280 root INFO MC model loaded. num_classes: 32
01:05:23,316 root INFO num_events: 200
01:05:23,463 root INFO === sub classes ===
01:05:23,463 root INFO                       nr_frames  nr_events
20 s2_default - 0          1834         50
10 s1_default - 0          1461         48
80 s8_overlap78 - 0        1410         45
0 other - 0 none            292        143
01:05:23,467 root INFO === super classes ===
01:05:23,467 root INFO               nr_frames  nr_events
s2_default         1834       50.0
s1_default         1461       48.0
s8_overlap78       1410       45.0
other               292        NaN
01:05:23,471 root INFO Data saved to ./generated//ArtifStates_f1_c3_2_simple_s200_v0.1/ArtifStates_f1_c3_2_simple_s200_v0.1.p
01:05:23,473 root INFO Sequence saved to ./generated//ArtifStates_f1_c3_2_simple_s200_v0.1/ArtifStates_f1_c3_2_simple_s200_v0.1_seq.csv
01:05:23,473 root INFO Tag list:
01:05:23,474 root INFO ['S10' 'T0' 'S20' 'S80']
01:05:24,411 root INFO Creating artificial data: ArtifStates_f1_example
01:05:24,416 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:24,416 root INFO poses: ['sample', 'trans']
01:05:24,416 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:24,417 root INFO num_events: 12
01:05:24,440 root INFO === sub classes ===
01:05:24,440 root INFO                                     nr_frames  nr_events
150 s15_long_overlap1415 - 0               45          1
0 other - 0 none                           36         11
40 sm4_mixture - 2 d2                      28          1
100 s10_overlap91011 - 0                   25          1
40 sm4_mixture - 1 d1                      25          1
90 s9_overlap78 - 0                        25          1
20 s2_default - 0                          23          1
110 s11_periodic_overlap91011 - 0          23          1
10 s1_default - 0                          19          1
80 s8_overlap78 - 0                        18          1
120 s12_periodic_overlap91011 - 0          17          1
160 s16_short_overlap1415 - 0               9          1
01:05:24,443 root INFO === super classes ===
01:05:24,443 root INFO                            nr_frames  nr_events
sm4_mixture                       53        1.0
s15_long_overlap1415              45        1.0
other                             36        NaN
s9_overlap78                      25        1.0
s10_overlap91011                  25        1.0
s11_periodic_overlap91011         23        1.0
s2_default                        23        1.0
s1_default                        19        1.0
s8_overlap78                      18        1.0
s12_periodic_overlap91011         17        1.0
s16_short_overlap1415              9        1.0
01:05:24,447 root INFO Data saved to ./generated//ArtifStates_f1_c10_nostruct_s0_v0.5_example/ArtifStates_f1_c10_nostruct_s0_v0.5_example.p
01:05:24,448 root INFO Sequence saved to ./generated//ArtifStates_f1_c10_nostruct_s0_v0.5_example/ArtifStates_f1_c10_nostruct_s0_v0.5_example_seq.csv
01:05:24,448 root INFO Tag list:
01:05:24,449 root INFO ['T0' 'S10' 'S20' 'S41' 'S42' 'S80' 'S90' 'S100' 'S110' 'S120' 'S150'
 'S160']
01:05:25,663 root INFO Creating artificial data: ArtifStates_f1
01:05:25,668 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:25,668 root INFO poses: ['sample', 'trans']
01:05:25,669 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:25,669 root INFO MC model loaded. num_classes: 32
01:05:25,772 root INFO num_events: 6266
01:05:30,163 root INFO === sub classes ===
01:05:30,163 root INFO                                     nr_frames  nr_events
150 s15_long_overlap1415 - 0            24035        520
80 s8_overlap78 - 0                     13591        558
90 s9_overlap78 - 0                     13578        550
10 s1_default - 0                       13527        541
120 s12_periodic_overlap91011 - 0       13381        548
40 sm4_mixture - 1 d1                   13364        546
20 s2_default - 0                       12983        513
110 s11_periodic_overlap91011 - 0       12938        524
40 sm4_mixture - 2 d2                   12874        512
100 s10_overlap91011 - 0                12789        531
0 other - 0 none                        11505       5751
160 s16_short_overlap1415 - 0            7200        518
01:05:30,175 root INFO === super classes ===
01:05:30,175 root INFO                            nr_frames  nr_events
sm4_mixture                    26238      948.0
s15_long_overlap1415           24035      520.0
s8_overlap78                   13591      558.0
s9_overlap78                   13578      550.0
s1_default                     13527      541.0
s12_periodic_overlap91011      13381      548.0
s2_default                     12983      513.0
s11_periodic_overlap91011      12938      524.0
s10_overlap91011               12789      531.0
other                          11505        NaN
s16_short_overlap1415           7200      518.0
01:05:30,194 root INFO Data saved to ./generated//ArtifStates_f1_c10_1_nostruct_s8000_v0.5/ArtifStates_f1_c10_1_nostruct_s8000_v0.5.p
01:05:30,206 root INFO Sequence saved to ./generated//ArtifStates_f1_c10_1_nostruct_s8000_v0.5/ArtifStates_f1_c10_1_nostruct_s8000_v0.5_seq.csv
01:05:30,206 root INFO Tag list:
01:05:30,207 root INFO ['S10' 'T0' 'S100' 'S110' 'S41' 'S42' 'S160' 'S90' 'S120' 'S20' 'S150'
 'S80']
01:05:31,492 root INFO Creating artificial data: ArtifStates_f1
01:05:31,502 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:31,502 root INFO poses: ['sample', 'trans']
01:05:31,502 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:31,503 root INFO MC model loaded. num_classes: 32
01:05:31,532 root INFO num_events: 1604
01:05:32,648 root INFO === sub classes ===
01:05:32,648 root INFO                                     nr_frames  nr_events
150 s15_long_overlap1415 - 0             6341        136
10 s1_default - 0                        3918        163
40 sm4_mixture - 2 d2                    3714        144
80 s8_overlap78 - 0                      3511        143
40 sm4_mixture - 1 d1                    3382        136
110 s11_periodic_overlap91011 - 0        3335        134
90 s9_overlap78 - 0                      3276        136
100 s10_overlap91011 - 0                 3201        131
20 s2_default - 0                        3164        133
120 s12_periodic_overlap91011 - 0        3163        130
0 other - 0 none                         2939       1466
160 s16_short_overlap1415 - 0            1624        115
01:05:32,651 root INFO === super classes ===
01:05:32,651 root INFO                            nr_frames  nr_events
sm4_mixture                     7096      245.0
s15_long_overlap1415            6341      136.0
s1_default                      3918      163.0
s8_overlap78                    3511      143.0
s11_periodic_overlap91011       3335      134.0
s9_overlap78                    3276      136.0
s10_overlap91011                3201      131.0
s2_default                      3164      133.0
s12_periodic_overlap91011       3163      130.0
other                           2939        NaN
s16_short_overlap1415           1624      115.0
01:05:32,658 root INFO Data saved to ./generated//ArtifStates_f1_c10_2_nostruct_s2000_v0.5/ArtifStates_f1_c10_2_nostruct_s2000_v0.5.p
01:05:32,662 root INFO Sequence saved to ./generated//ArtifStates_f1_c10_2_nostruct_s2000_v0.5/ArtifStates_f1_c10_2_nostruct_s2000_v0.5_seq.csv
01:05:32,662 root INFO Tag list:
01:05:32,662 root INFO ['S10' 'T0' 'S120' 'S80' 'S110' 'S20' 'S90' 'S42' 'S41' 'S100' 'S160'
 'S150']
01:05:33,889 root INFO Creating artificial data: ArtifStates_f1_example
01:05:33,896 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:33,896 root INFO poses: ['sample', 'trans']
01:05:33,896 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:33,897 root INFO num_events: 16
01:05:33,923 root INFO === sub classes ===
01:05:33,923 root INFO                                     nr_frames  nr_events
0 other - 0 none                           37          9
240 ss22_mix_overlap2223 - 2 d2            28          1
260 q24_seq_psp_overlap2425 - 2 d2         27          1
240 ss22_mix_overlap2223 - 1 d1            27          1
230 ss21_mix_overlap202123 - 2 d2          26          1
240 ss22_mix_overlap2223 - 3 d3            24          1
250 ss23_mix_overlap212223 - 2 d2          24          1
20 s2_default - 0                          24          1
230 ss21_mix_overlap202123 - 1 d1          24          1
240 ss22_mix_overlap2223 - 4 d4            23          1
250 ss23_mix_overlap212223 - 1 d1          22          1
270 s25_overlap2425 - 0                    17          1
10 s1_default - 0                          17          1
260 q24_seq_psp_overlap2425 - 1 d1          7          1
260 q24_seq_psp_overlap2425 - 3 d3          5          1
220 p20_overlap2021 - 0                     4          1
01:05:33,926 root INFO === super classes ===
01:05:33,926 root INFO                          nr_frames  nr_events
ss22_mix_overlap2223           102        1.0
ss21_mix_overlap202123          50        1.0
ss23_mix_overlap212223          46        1.0
q24_seq_psp_overlap2425         39        1.0
other                           37        NaN
s2_default                      24        1.0
s1_default                      17        1.0
s25_overlap2425                 17        1.0
p20_overlap2021                  4        1.0
01:05:33,930 root INFO Data saved to ./generated//ArtifStates_f1_c8_struct_s0_v0.5_example/ArtifStates_f1_c8_struct_s0_v0.5_example.p
01:05:33,931 root INFO Sequence saved to ./generated//ArtifStates_f1_c8_struct_s0_v0.5_example/ArtifStates_f1_c8_struct_s0_v0.5_example_seq.csv
01:05:33,931 root INFO Tag list:
01:05:33,932 root INFO ['T0' 'S10' 'S20' 'P220' 'S231' 'S232' 'S241' 'S242' 'S243' 'S244' 'S251'
 'S252' 'P261' 'S262' 'P263' 'S270']
01:05:35,17 root INFO Creating artificial data: ArtifStates_f1
01:05:35,22 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:35,22 root INFO poses: ['sample', 'trans']
01:05:35,23 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:35,23 root INFO MC model loaded. num_classes: 32
01:05:35,85 root INFO num_events: 6670
01:05:39,873 root INFO === sub classes ===
01:05:39,873 root INFO                                     nr_frames  nr_events
240 ss22_mix_overlap2223 - 4 d4         16670        663
240 ss22_mix_overlap2223 - 3 d3         16506        677
240 ss22_mix_overlap2223 - 2 d2         16263        642
240 ss22_mix_overlap2223 - 1 d1         15895        633
250 ss23_mix_overlap212223 - 2 d2        9671        392
250 ss23_mix_overlap212223 - 1 d1        9610        394
260 q24_seq_psp_overlap2425 - 2 d2       8844        353
20 s2_default - 0                        8527        335
270 s25_overlap2425 - 0                  8407        347
230 ss21_mix_overlap202123 - 1 d1        8198        335
10 s1_default - 0                        7878        330
230 ss21_mix_overlap202123 - 2 d2        7651        307
0 other - 0 none                         7341       3669
260 q24_seq_psp_overlap2425 - 1 d1       2246        353
260 q24_seq_psp_overlap2425 - 3 d3       2199        353
220 p20_overlap2021 - 0                  1822        324
01:05:39,876 root INFO === super classes ===
01:05:39,876 root INFO                          nr_frames  nr_events
ss22_mix_overlap2223         65334      899.0
ss23_mix_overlap212223       19281      518.0
ss21_mix_overlap202123       15849      594.0
q24_seq_psp_overlap2425      13289      322.0
s2_default                    8527      335.0
s25_overlap2425               8407      347.0
s1_default                    7878      330.0
other                         7341        NaN
p20_overlap2021               1822      324.0
01:05:39,891 root INFO Data saved to ./generated//ArtifStates_f1_c8_1_struct_s8000_v0.5/ArtifStates_f1_c8_1_struct_s8000_v0.5.p
01:05:39,903 root INFO Sequence saved to ./generated//ArtifStates_f1_c8_1_struct_s8000_v0.5/ArtifStates_f1_c8_1_struct_s8000_v0.5_seq.csv
01:05:39,903 root INFO Tag list:
01:05:39,903 root INFO ['S10' 'T0' 'S241' 'S243' 'S232' 'P261' 'S262' 'P263' 'P220' 'S20' 'S251'
 'S252' 'S244' 'S242' 'S270' 'S231' 'S263' 'S220' 'S261']
01:05:41,158 root INFO Creating artificial data: ArtifStates_f1
01:05:41,170 root INFO classes: [  0   1  10  20  30  41  42  50  60  70  80  90 100 110 120 130 140 150
 160 220 231 232 241 242 243 244 251 252 261 262 263 270]
01:05:41,170 root INFO poses: ['sample', 'trans']
01:05:41,171 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'corr_mean_within', 'corr_per_within_amp', 'corr_per_within_period',
       'like', 'tag'],
      dtype='object')
01:05:41,171 root INFO MC model loaded. num_classes: 32
01:05:41,189 root INFO num_events: 1853
01:05:42,506 root INFO === sub classes ===
01:05:42,506 root INFO                                     nr_frames  nr_events
240 ss22_mix_overlap2223 - 1 d1          5543        221
240 ss22_mix_overlap2223 - 4 d4          5096        207
240 ss22_mix_overlap2223 - 3 d3          5017        198
240 ss22_mix_overlap2223 - 2 d2          4632        185
250 ss23_mix_overlap212223 - 2 d2        2924        117
250 ss23_mix_overlap212223 - 1 d1        2461        100
260 q24_seq_psp_overlap2425 - 2 d2       2267         92
10 s1_default - 0                        2154         91
230 ss21_mix_overlap202123 - 2 d2        2039         81
270 s25_overlap2425 - 0                  1987         80
0 other - 0 none                         1894        944
20 s2_default - 0                        1767         75
230 ss21_mix_overlap202123 - 1 d1        1696         71
260 q24_seq_psp_overlap2425 - 1 d1        595         92
260 q24_seq_psp_overlap2425 - 3 d3        583         92
220 p20_overlap2021 - 0                   469         86
01:05:42,509 root INFO === super classes ===
01:05:42,509 root INFO                          nr_frames  nr_events
ss22_mix_overlap2223         20288      252.0
ss23_mix_overlap212223        5385      135.0
ss21_mix_overlap202123        3735      139.0
q24_seq_psp_overlap2425       3445       86.0
s1_default                    2154       91.0
s25_overlap2425               1987       80.0
other                         1894        NaN
s2_default                    1767       75.0
p20_overlap2021                469       86.0
01:05:42,516 root INFO Data saved to ./generated//ArtifStates_f1_c8_2_struct_s2000_v0.5/ArtifStates_f1_c8_2_struct_s2000_v0.5.p
01:05:42,521 root INFO Sequence saved to ./generated//ArtifStates_f1_c8_2_struct_s2000_v0.5/ArtifStates_f1_c8_2_struct_s2000_v0.5_seq.csv
01:05:42,521 root INFO Tag list:
01:05:42,521 root INFO ['S10' 'T0' 'S232' 'S243' 'P261' 'S262' 'P263' 'S252' 'S251' 'S231' 'P220'
 'S270' 'S244' 'S242' 'S20' 'S220' 'S241' 'S261' 'S263']
01:05:43,687 root INFO Creating artificial data: ArtifRat_f4_example
01:05:43,694 root INFO classes: [  0   1  11  12  13  21  22  23  31  32  33  35  41  42  43  44  46  47
  70 151 152 153 160 211 212 213]
01:05:43,694 root INFO poses: ['sample', 'trans']
01:05:43,695 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'feat2_mean', 'feat2_std', 'feat2_min', 'feat2_max', 'feat3_mean',
       'feat3_std', 'feat3_min', 'feat3_max', 'feat4_mean', 'feat4_std',
       'feat4_min', 'feat4_max', 'corr_mean_within', 'corr_per_within_amp',
       'corr_per_within_period', 'like', 'tag'],
      dtype='object')
01:05:43,695 root INFO num_events: 26
01:05:43,824 root INFO === sub classes ===
01:05:43,824 root INFO                    nr_frames  nr_events
150 b7 - 3 d3           1444          1
40 b5 - 7 d7             590          1
40 b5 - 6 d6             527          1
30 b3 - 1 d1             523          1
40 b5 - 2 d2             296          1
30 b3 - 3 d3             290          1
35 b4 - 0                160          1
160 b8 - 0               139          1
40 b5 - 3 d3              97          1
40 b5 - 4 d4              64          1
150 b7 - 1 d1             57          1
40 b5 - 1 d1              52          1
70 b6 - 0                 41          1
0 other - 0 none          39         11
20 b2 - 3 d3              35          1
150 b7 - 2 d2             31          1
20 b2 - 1 d1              21          1
30 b3 - 2 d2              17          1
10 b1 - 1 d1              13          1
210 b9 - 2 d2             10          1
20 b2 - 2 d2               8          1
10 b1 - 3 d3               8          1
10 b1 - 2 d2               7          1
210 b9 - 1 d1              6          1
210 b9 - 3 d3              5          1
0 other - 1 trans          5          1
01:05:43,828 root INFO === super classes ===
01:05:43,828 root INFO        nr_frames  nr_events
b5          1626          1
b7          1532          1
b3           830          1
b4           160          1
b8           139          1
b2            64          1
other         44          1
b6            41          1
b1            28          1
b9            21          1
01:05:43,832 root INFO Data saved to ./generated//ArtifRat_f4_c9_s0_v0.2_example/ArtifRat_f4_c9_s0_v0.2_example.p
01:05:43,833 root INFO Sequence saved to ./generated//ArtifRat_f4_c9_s0_v0.2_example/ArtifRat_f4_c9_s0_v0.2_example_seq.csv
01:05:43,833 root INFO Tag list:
01:05:43,833 root INFO ['T0' 'T1' 'T11' 'P12' 'T13' 'T21' 'P22' 'T23' 'S31' 'S32' 'S33' 'S35'
 'S41' 'S42' 'S43' 'S44' 'S46' 'S47' 'S70' 'T70' 'S151' 'S152' 'S153'
 'S160' 'T160' 'P211' 'S212' 'S213']
01:05:44,163 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,176 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,188 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,199 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,211 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,223 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,235 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,246 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,258 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,269 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,281 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,292 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,370 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,376 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,382 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,388 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,394 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,400 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,406 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,412 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,419 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,424 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,430 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:44,436 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,233 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,244 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,298 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,352 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,405 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,464 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,472 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,523 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,576 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,633 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,685 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,693 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,954 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,962 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:45,970 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,41 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,51 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,100 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,151 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,201 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,255 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,260 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,310 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,360 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,414 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,465 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,473 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,752 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,759 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,770 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,855 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,858 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,864 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,872 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,879 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,887 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,894 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,897 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,904 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,911 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,920 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,927 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,934 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,937 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:46,944 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,19 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,21 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,27 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,34 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,41 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,48 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,55 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,58 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,64 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,70 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,78 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,85 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,91 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,94 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,100 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,171 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,179 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,230 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,280 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,330 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,387 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,395 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,448 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,503 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,556 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,607 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,613 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,850 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,858 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:47,865 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,2 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,10 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,60 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,109 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,159 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,211 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,216 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,266 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,315 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,367 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,416 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,422 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,658 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,665 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:48,672 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:05:50,80 root INFO Creating artificial data: ArtifRat_f4
01:05:50,86 root INFO classes: [  0   1  11  12  13  21  22  23  31  32  33  35  41  42  43  44  46  47
  70 151 152 153 160 211 212 213]
01:05:50,86 root INFO poses: ['sample', 'trans']
01:05:50,86 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'feat2_mean', 'feat2_std', 'feat2_min', 'feat2_max', 'feat3_mean',
       'feat3_std', 'feat3_min', 'feat3_max', 'feat4_mean', 'feat4_std',
       'feat4_min', 'feat4_max', 'corr_mean_within', 'corr_per_within_amp',
       'corr_per_within_period', 'like', 'tag'],
      dtype='object')
01:05:50,87 root INFO MC model loaded. num_classes: 31
01:05:50,138 root INFO num_events: 8000
01:06:09,604 root INFO === sub classes ===
01:06:09,604 root INFO                    nr_frames  nr_events
160 b8 - 0            183473       1849
40 b5 - 6 d6           51815        170
40 b5 - 2 d2           50298        121
70 b6 - 0              36190        933
30 b3 - 1 d1           35489        147
30 b3 - 3 d3           32248        175
150 b7 - 3 d3          24987         42
40 b5 - 3 d3           22191        145
20 b2 - 2 d2           22080        579
35 b4 - 0              20069        107
30 b3 - 2 d2           17806        126
20 b2 - 1 d1           17460        555
20 b2 - 3 d3           15450        571
40 b5 - 7 d7            9155         17
0 other - 0 none        8876       4431
40 b5 - 1 d1            7780         97
150 b7 - 1 d1           4901         73
10 b1 - 1 d1            4218        200
10 b1 - 3 d3            2996        192
10 b1 - 2 d2            2167        194
210 b9 - 2 d2           1389         77
40 b5 - 4 d4            1258         47
210 b9 - 1 d1            669         77
210 b9 - 3 d3            600         77
150 b7 - 2 d2            358         13
0 other - 1 trans          5          1
01:06:09,608 root INFO === super classes ===
01:06:09,608 root INFO        nr_frames  nr_events
b8        183473       1849
b5        142497        215
b3         85543        413
b2         54990        529
b6         36190        933
b7         30246        128
b4         20069        107
b1          9381        179
other       8881          1
b9          2658         77
01:06:09,658 root INFO Data saved to ./generated//ArtifRat_f4_c9_1_s8000_v0.2/ArtifRat_f4_c9_1_s8000_v0.2.p
01:06:09,678 root INFO Sequence saved to ./generated//ArtifRat_f4_c9_1_s8000_v0.2/ArtifRat_f4_c9_1_s8000_v0.2_seq.csv
01:06:09,678 root INFO Tag list:
01:06:09,679 root INFO ['S160' 'T160' 'T0' 'P211' 'S212' 'S213' 'T11' 'S12' 'T13' 'S70' 'T70'
 'S35' 'T21' 'S22' 'T23' 'S151' 'P22' 'S31' 'S42' 'S43' 'P12' 'S46' 'S41'
 'S33' 'S153' 'S47' 'S32' 'S211' 'S44' 'P31' 'P213' 'S152' 'T1']
01:06:10,181 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,192 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,203 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,214 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,226 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,237 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,248 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,259 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,271 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,282 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,293 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,304 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,382 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,388 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,394 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,399 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,406 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,412 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,418 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,424 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,430 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,436 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,443 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:10,449 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,225 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,234 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,286 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,340 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,393 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,450 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,456 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,513 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,569 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,625 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,681 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,687 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,950 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,957 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:11,965 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,38 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,46 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,102 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,155 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,208 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,264 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,270 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,325 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,378 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,433 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,489 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,494 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,747 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,754 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,767 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,853 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,856 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,863 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,870 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,878 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,886 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,894 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,897 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,904 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,911 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,920 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,927 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,935 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,938 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:12,945 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,21 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,24 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,30 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,37 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,44 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,51 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,58 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,61 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,67 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,73 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,81 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,87 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,94 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,97 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,103 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,171 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,182 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,236 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,290 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,344 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,403 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,411 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,467 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,524 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,580 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,634 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,642 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,886 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,894 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:13,901 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,41 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,49 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,101 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,153 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,204 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,260 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,266 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,318 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,369 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,423 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,476 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,482 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,722 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,729 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:14,736 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:16,87 root INFO Creating artificial data: ArtifRat_f4
01:06:16,103 root INFO classes: [  0   1  11  12  13  21  22  23  31  32  33  35  41  42  43  44  46  47
  70 151 152 153 160 211 212 213]
01:06:16,103 root INFO poses: ['sample', 'trans']
01:06:16,104 root INFO pose_specs: Index(['code_super', 'code_sub', 'tag_super', 'tag_sub', 'n_events', 'ev_perc',
       'len_mean', 'len_std', 'len_min', 'len_max', 'len_med', 'n_poses',
       'pose', 'feat1_mean', 'feat1_std', 'feat1_min', 'feat1_max',
       'feat2_mean', 'feat2_std', 'feat2_min', 'feat2_max', 'feat3_mean',
       'feat3_std', 'feat3_min', 'feat3_max', 'feat4_mean', 'feat4_std',
       'feat4_min', 'feat4_max', 'corr_mean_within', 'corr_per_within_amp',
       'corr_per_within_period', 'like', 'tag'],
      dtype='object')
01:06:16,105 root INFO MC model loaded. num_classes: 31
01:06:16,128 root INFO num_events: 2000
01:06:21,62 root INFO === sub classes ===
01:06:21,63 root INFO                    nr_frames  nr_events
160 b8 - 0             43704        445
150 b7 - 3 d3          18940         18
40 b5 - 2 d2           12682         31
30 b3 - 1 d1           11164         44
40 b5 - 6 d6           10943         51
30 b3 - 3 d3            7499         38
70 b6 - 0               7444        209
20 b2 - 2 d2            5919        162
40 b5 - 3 d3            5231         30
35 b4 - 0               5093         25
20 b2 - 1 d1            5079        159
30 b3 - 2 d2            5040         30
40 b5 - 7 d7            4593         12
20 b2 - 3 d3            4335        158
0 other - 0 none        2170       1082
40 b5 - 1 d1            2151         27
150 b7 - 1 d1           1080         19
10 b1 - 1 d1            1021         46
10 b1 - 3 d3             640         44
10 b1 - 2 d2             601         46
210 b9 - 2 d2            251         16
40 b5 - 4 d4             181          6
210 b9 - 1 d1            116         16
210 b9 - 3 d3            116         16
150 b7 - 2 d2            112          4
0 other - 1 trans          6          1
01:06:21,66 root INFO === super classes ===
01:06:21,66 root INFO        nr_frames  nr_events
b8         43704        445
b5         35781         50
b3         23703        105
b7         20132         40
b2         15333        150
b6          7444        209
b4          5093         25
b1          2262         41
other       2176          1
b9           483         16
01:06:21,83 root INFO Data saved to ./generated//ArtifRat_f4_c9_2_s2000_v0.2/ArtifRat_f4_c9_2_s2000_v0.2.p
01:06:21,89 root INFO Sequence saved to ./generated//ArtifRat_f4_c9_2_s2000_v0.2/ArtifRat_f4_c9_2_s2000_v0.2_seq.csv
01:06:21,89 root INFO Tag list:
01:06:21,89 root INFO ['S160' 'T160' 'T0' 'S35' 'T21' 'S22' 'T23' 'S70' 'T70' 'P22' 'S31' 'S32'
 'S33' 'S46' 'S41' 'S42' 'P211' 'S212' 'P213' 'S43' 'T11' 'P12' 'T13'
 'S153' 'S211' 'S47' 'S12' 'S44' 'S152' 'S151' 'P31' 'S213' 'T1']
01:06:21,389 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,401 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,412 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,424 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,436 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,448 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,459 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,470 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,484 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,495 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,506 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,517 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,596 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,602 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,608 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,614 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,621 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,627 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,633 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,639 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,646 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,651 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,657 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:21,663 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,520 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,529 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,582 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,637 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,689 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,745 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,751 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,803 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,856 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,909 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,963 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:22,968 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,225 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,232 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,240 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,310 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,317 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,369 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,421 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,474 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,528 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,534 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,585 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,637 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,690 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,742 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,748 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:23,996 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,3 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,11 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,87 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,90 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,97 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,104 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,111 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,119 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,127 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,129 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,136 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,143 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,151 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,159 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,166 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,169 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,175 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,244 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,247 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,253 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,260 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,267 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,274 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,281 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,283 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,289 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,297 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,304 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,311 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,318 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,320 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,326 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,396 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,407 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,462 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,517 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,571 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,626 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,631 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,684 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,736 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,793 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,847 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:24,854 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,99 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,106 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,114 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,252 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,260 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,312 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,363 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,414 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,466 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,472 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,524 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,575 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,629 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,681 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,686 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,923 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,930 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
01:06:25,937 matplotlib.axes._base DEBUG top of axes not in the figure, so title not moved
